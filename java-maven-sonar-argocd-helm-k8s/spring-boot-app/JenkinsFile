pipeline {
    agent any

    environment {
        RELEASE_BRANCH = 'main'
    }

    parameters {
      string(
        name: 'RELEASE_VERSION',
        defaultValue: '1.0.0',
        description: 'The release version to build (format: X.Y.Z)'
      )
      string(
        name: 'DEVELOPMENT_VERSION',
        defaultValue: '1.0.1-SNAPSHOT',
        description: 'The next version to update the pom (format: X.Y.Z-SNAPSHOT)'
      )
    }

    options {
        timestamps()
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Check existing tag') {
            when {
                expression {
                    RELEASE_TAG = sh(script: "git tag -l ${params.RELEASE_VERSION}", returnStdout: true).trim()
                    return RELEASE_TAG == params.RELEASE_VERSION
                }
            }
            steps {
                echo(">> Tag ${params.RELEASE_VERSION} already exists")
                sh "git tag -d ${params.RELEASE_VERSION}"
            }
        }

        stage("Release setup") {
            steps {
                echo ">> RELEASE_VERSION: ${params.RELEASE_VERSION}"

                echo ">> Version update"
                withMaven(maven: 'MAVEN_ENV') {
                    sh "mvn versions:set -DnewVersion=${params.RELEASE_VERSION} -DprocessAllModules -DgenerateBackupPoms=false"
                }

                echo ">> Commit the modified POM file and tag the release"
                sh('''
                    git config user.name 'aek'
                    git config user.email 'anicetkeric@outlook.com'
                    git add :/*pom.xml
                    git commit -m "Release ${params.RELEASE_VERSION}"
                    git tag -a ${params.RELEASE_VERSION} -m "New Tag ${params.RELEASE_VERSION}"
                ''')

                echo ">> Release setup successfully"
            }
        }

        stage("Release Build and deploy") {
            steps {
                withMaven(maven: 'MAVEN_ENV') {
                    sh "mvn clean install -DskipTests=true"
                }

                echo ">> Publish tag to repository"
                configFileProvider([configFile(fileId: '1e855f66-f777-4538-9d9a-782c61054866', variable: 'MyGlobalSettings')]) {
                    withAWS(credentials: 'AWS_IAM_CREDENTIALS', region: 'us-east-2') {
                        script {
                            env.CODEARTIFACT_AUTH_TOKEN = sh(script: 'aws codeartifact get-authorization-token --domain boottech --domain-owner $AWS_ACCOUNT_ID --region us-east-2 --query authorizationToken --output text', returnStdout: true).trim()
                        }
                        withMaven(maven: 'MAVEN_ENV') {
                            sh "mvn -s ${MyGlobalSettings} clean deploy -DskipTests=true"
                        }
                    }
                }
            }
        }

        stage("Adding next version") {
            steps {
                echo ">> DEVELOPMENT_VERSION: ${params.DEVELOPMENT_VERSION}"

                withMaven(maven: 'MAVEN_ENV') {
                    sh "mvn versions:set -DnewVersion=${params.DEVELOPMENT_VERSION} -DprocessAllModules -DgenerateBackupPoms=false"
                }

                echo ">> Commit the modified POM file and push next version"
                withCredentials([gitUsernamePassword(credentialsId: 'GITHUB_TOKEN', gitToolName: 'Default')]) {
                    sh('''
                        git add :/*pom.xml
                        git commit -m "Prepare the next snapshot version: ${params.DEVELOPMENT_VERSION}"
                        git push origin ${params.RELEASE_BRANCH}
                        git push origin refs/tags/${params.RELEASE_VERSION}
                    ''')
                }

                echo ">> The next snapshot version pushed successfully"
            }
        }
    }
}
