pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }

  environment {
    SONAR_URL = "http://3.80.168.81:9000/"
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "krishnap2312"
    GIT_REPO_URL = "https://github.com/krishnap2312/Jenkins-Zero-To-Hero.git"
    GIT_BRANCH = "main"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: "${GIT_BRANCH}", url: "${GIT_REPO_URL}"
      }
    }

    stage('Build and Test') {
      steps {
        // Build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'SonarQubeToken', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ultimate-cicd:${BUILD_NUMBER}"
        AWS_ACCOUNT_ID = '767828727718' // Replace with your AWS Account ID
        AWS_REGION = 'us-east-1' // Replace with your AWS Region
        ECR_REPOSITORY = 'ultimate-cicd' // Replace with your ECR repository name
        AWS_CREDENTIALS = credentials('aws-credentials') // Assuming you have AWS credentials configured in Jenkins
      }
      steps {
        script {
          // Create the ECR repository if it doesn't exist
          sh '''
            aws ecr describe-repositories --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION} || \
            aws ecr create-repository --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION}
          '''

          // Build the Docker image
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'

          // Tag the Docker image for AWS ECR
          def ecrImage = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${BUILD_NUMBER}"
          sh "docker tag ${DOCKER_IMAGE} ${ecrImage}"

          // Authenticate Docker with AWS ECR
          withCredentials([usernamePassword(credentialsId: 'aws-credentials', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
            sh '''
              aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            '''
          }

          // Push the Docker image to AWS ECR
          sh "docker push ${ecrImage}"
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "2312krishnap2312@gmail.com"
            git config user.name "krishnap2312"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app/manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app/manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
